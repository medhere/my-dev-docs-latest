Degit

	Usage
	Basics
	The simplest use of degit is to download the master branch of a repo from GitHub to the current working directory:

	degit user/repo

	# these commands are equivalent
	degit github:user/repo
	degit git@github.com:user/repo
	degit https://github.com/user/repo

	Or you can download from GitLab and BitBucket:
	# download from GitLab
	degit gitlab:user/repo
	degit git@gitlab.com:user/repo
	degit https://gitlab.com/user/repo
	# download from BitBucket
	degit bitbucket:user/repo
	degit git@bitbucket.org:user/repo
	degit https://bitbucket.org/user/repo
	# download from Sourcehut
	degit git.sr.ht/user/repo
	degit git@git.sr.ht:user/repo
	degit https://git.sr.ht/user/repo

	Specify a tag, branch or commit
	The default branch is master.
	degit user/repo#dev       # branch
	degit user/repo#v1.2.3    # release tag
	degit user/repo#1234abcd  # commit hash

	Create a new folder for the project
	If the second argument is omitted, the repo will be cloned to the current directory.
	degit user/repo my-new-project

	Specify a subdirectory
	To clone a specific subdirectory instead of the entire repo, just add it to the argument:
	degit user/repo/subdirectory

	HTTPS proxying
	If you have an https_proxy environment variable, Degit will use it.

	Private repositories
	Private repos can be cloned by specifying --mode=git (the default is tar). In this mode, Degit will use git under the hood. It's much slower than fetching a tarball, which is why it's not the default.
	Note: this clones over SSH, not HTTPS.

	See all options
	degit --help
