
learn react hooks
	useState 
		var [state,changeState] = useState('')
		    setState((prev)=>{  return( prev.filter((item,i)=>{return( item !== value )}))  })		//remove from array 

			var {name, value}=e.target;
			setState((prev)=>{ return({...prev,[name]:value}) })	//update object
			
			setState((prev)=>{ return([...prev,value]) });	// update array
			
			setState((prev)=>{ return !prev;});	// change to false|true

	useEffect/useLayoutEffect 
		useEffect(()=>{},[])
	useContext 
		export const Store=createContext({index:value})  (use of state management is better)
		use as import {Store}
		var data=useContext(Store) 
		{data.index} 
	useReducer (use of state management is better)
			function reducer(state,action){
			//use switch statement
				if (action.type==="increment"){
					return {count: state.count + action.payload} 
				}
			}
			const [state, dispatch]=useReducer(reducer,{count:0})
			use as state.count, dispatch({type:'increment', payload: 1})
			
	useCallback 
		var memoized = useCallback(()=>{}, [...deps]) //returns callback func
	useMemo 
		var memoized = useMemo(()=>{}, [...deps]) //returns value
	useRef
		const input=useRef(null); //React.createRef() on class component
		input.current
		input.current.anyactionontarget();
		<input ref={input} />



learn advanced react

	memo
		import { memo } from "react";
		export const Todos = memo(() => {
		  return (
			<>
			  <h2>My Todos</h2>
			</>
		  )
		})
		or
		export default memo(Todos);
	
	
	PropTypes
		import PropTypes from 'prop-types'
		function Component(props) {return (<div>Hello, {props.name}</div>)}
		Component.propTypes = {props.name: PropTypes.string}
		  PropTypes.any,
		  PropTypes.bool,
		  PropTypes.string,
		  PropTypes.number,
		  PropTypes.func,
		  PropTypes.array,
		  PropTypes.object,
		  PropTypes.elementType,   
		  PropTypes.oneOf(['News', 'Photos']),
		  PropTypes.oneOfType([
			PropTypes.string,
			PropTypes.number
		  ]),
		  PropTypes.func.isRequired / PropTypes.any.isRequired,

		  
	Code Spliting/ErrorBoundary
		using import
			import("./math").then(math => {console.log(math.add(16, 26));});
		
		using React.lazy for lazy loading (currently only supports default exports)
			export { OtherComponent as default } from "./ManyComponents.js"; //OtherComponent.js
			
			const OtherComponent = React.lazy(() => import('./OtherComponent'));

			<Suspense fallback={<div>Loading...</div>}><OtherComponent /></Suspense>
			// e.g can be used to lazy load routes on react-router-dom
	
		import { lazy } from "react"
		export function lazyWithPreload (factory){
		  const Component = lazy(factory)
		  Component.preload = factory
		  return Component
		}
		const Component = lazyWithPreload(() => import(/* webpackChunkName: "" *//* webpackMode: "lazy" *//* webpackPrefetch: true */ './Components'));


		import { lazy, Suspense } from 'react';
		import { ErrorBoundary } from 'react-error-boundary';
		
		const Component = lazy(() => import(/* webpackChunkName: "" *//* webpackMode: "lazy-once" *//* webpackPrefetch: true */ './Components'));

		export default function LoadingUI({children}){
		  return(
			<ErrorBoundary FallbackComponent={ErrorFallback} onReset={() => {console.log('app reset')}}>
			  <Suspense fallback={<div>Loading...</div>}>
				{children}
			  </Suspense>
			</ErrorBoundary>
		  )
		}

		function ErrorFallback ({ error, resetErrorBoundary }) {
		  return (
			<div className='text-center mx-auto mt-[20vh]'>
			  <p>Something went wrong:</p><pre>{error.message}</pre>
			  <button className='btn-primary' onClick={resetErrorBoundary}>Try again</button>
			</div>
		  );
		};		
		// <LoadingUI></App></LoadingUI>





	
	
	Forwarded Ref
		const FancyButton = React.forwardRef((props, ref) => (
		  <button ref={ref} className="FancyButton">
			{props.children}
		  </button>
		));

		// You can now get a ref directly to the DOM button:
		const ref = React.createRef();
		const ref = React.useRef(null);
		<FancyButton ref={ref}>Click me!</FancyButton>;

	