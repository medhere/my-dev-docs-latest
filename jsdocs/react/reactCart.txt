		react-use-cart
		react-hook-cart --force


	REACT-USE-CART
		import { CartProvider, useCart } from "react-use-cart";

		function Page() {
			const { addItem } = useCart();
		  
			const products = [
			  { id: 1, name: "Malm", price: 9900, quantity: 1 },
			  { id: 2, name: "Nordli", price: 16500, quantity: 5 },
			  { id: 3, name: "Kullen", price: 4500, quantity: 1 },
			];
		  
			return (
			  <>
				{products.map((p) => (
				  <div key={p.id}> <button onClick={() => addItem(p)}>Add to cart: {p.name} {p.price} </button></div>
				))}
			  </>
			);
		  }


		function Cart() {
			const { isEmpty, totalUniqueItems, items, updateItemQuantity, removeItem } = useCart();
		  
			if (isEmpty) return <p>Your cart is empty</p>;
		  
			return (
			  <>
				<h1>Cart ({totalUniqueItems})</h1>
		  
				<ul>
				  {items.map((item) => (
					<li key={item.id}>
					  {item.quantity} x {item.name} &mdash;
					  <button onClick={() => updateItemQuantity(item.id, item.quantity - 1)}> - </button>
					  <button onClick={() => updateItemQuantity(item.id, item.quantity + 1)}> + </button>
					  <button onClick={() => removeItem(item.id)}>&times;</button>
					</li>
				  ))}
				</ul>

				<h3></h3>
			  </>
			);
		  }
		  

		export function MyCart1() {
			return (
			  <CartProvider>
				<Page />
				<Cart />
			  </CartProvider>
			);
		}

		export function MyCart2() {
			return (
			  <CartProvider>
				<Page />
				<Cart />
			  </CartProvider>
			);
		}
		
		CartProvider
    	<CartProvider></CartProvider>,
		Props
		Prop			Required	Description
		id				No			id for your cart to enable automatic cart retrieval via window.localStorage. If you pass a id then you can use multiple instances of CartProvider.
		onSetItems		No			Triggered only when setItems invoked.
		onItemAdd		No			Triggered on items added to your cart, unless the item already exists, then onItemUpdate will be invoked.
		onItemUpdate	No			Triggered on items updated in your cart, unless you are setting the quantity to 0, then onItemRemove will be invoked.
		onItemRemove	No			Triggered on items removed from your cart.
		storage			No			Must return [getter, setter].
		metadata		No			Custom global state on the cart. Stored inside of metadata.
		
		
		cart items
		const products = [
			  { id: 1, name: "Malm", price: 9900, quantity: 1 },
			  { id: 2, name: "Nordli", price: 16500, quantity: 5 },
			  ...
		];
		const products = [
		  {
			id: "ckb64v21u000001ksgw2s42ku",
			name: "Fresh Foam 1080v9",
			brand: "New Balance",
			color: "Neon Emerald with Dark Neptune",
			size: "US 10",
			width: "B - Standard",
			sku: "W1080LN9",
			price: 15000,
		  },...
		]
		
		useCart()
		setItems(items)							items=[{id,name,price,quantity,...color,size},...{}] //no quantity, then quantity=1
		addItem(item, quantity)					item={id,name,price} quantity=1
		updateItem(itemId, data)				itemId=id, data={color,size}
		updateItemQuantity(itemId, quantity)	itemId=id, quantity=3
		removeItem(itemId)						itemId=id
		emptyCart()
		clearCartMetadata()
		setCartMetadata(object)					object={ notes: "This is the only metadata" }
		updateCartMetadata(object)				object={ notes: "Leave in shed" }
		items 									= [] 	// return the current cart items in an array.
		isEmpty									= true/false 	// check if the cart is empty.
		getItem(itemId)							itemId=id  ={}	// Get a specific cart item by id. Returns the item object
		inCart(itemId)							itemId=id	= true/false
		totalItems								// returns the totaly quantity of items in the cart as an integer
		totalUniqueItems						// This returns the total unique items in the cart as an integer.
		cartTotal								// This returns the total value of all items in the cart.
		metadata 								= {}  //returns metadata set with updateCartMetadata. This is useful for storing additional cart, or checkout values.
			

