Database
	config
		config/database.php	OR .env
			normal
				'mysql' => [
					'driver' => 'mysql',
					'database' => 'database',
					'username' => 'root',
					'password' => '',
					'charset' => 'utf8mb4',
					'collation' => 'utf8mb4_unicode_ci',
					'prefix' => '',
				]
			using URL( url (or corresponding DATABASE_URL environment variable))
				driver://username:password@host:port/database?options
				mysql://root:password@127.0.0.1/forge?charset=UTF-8
					can set up multiple dbs
		use Illuminate\Support\Facades\DB;
		
	Using multiple dbase conns
		$users = DB::connection('sqlite');
		$users->select(...);
		$users = DB::connection('sqlite')->select(...);
			//$users = DB::select|insert|update|delete|statement('query id = ?', [1]);	// symbol binding for sql injection
			//$users = DB::select|insert|update|delete|statement('query id = :id', ['id' => 1]);	//named binding for sql injection

	Connecting To The Database CLI
		php artisan db mysql
		
	SQL Queries
			$users = DB::select('select * from users');		//select
			$users = DB::select('select * from users where active = ?', [1]);	// symbol binding for sql injection
			$results = DB::select('select * from users where id = :id', ['id' => 1]);	//named binding for sql injection			
				return view('user.index', ['users' => $users]);	
				foreach ($users as $user) {
					echo $user->name;
				}
		
			DB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);		//insert
			$affected = DB::update('update users set votes = 100 where name = ?',['Anita']);	//update
			$deleted = DB::delete('delete from users');		//delete
			DB::statement('drop table users');		//general sql statement
			
			Pagination
				//Offset Pagination...
				The SQL query below says "return only 10 records, start on record 16 (OFFSET 15)":
				SELECT * FROM Orders LIMIT 10 OFFSET 15;
					$next_offset = $page_number * $count_per_page;
					$sql = "SELECT * FROM Orders LIMIT $count_per_page OFFSET $next_offset";

				//Cursor Pagination...
				SELECT * from Orders WHERE id > 15 ORDER BY id ASC LIMIT 15;
					if($page_number>1) $next=1;
					$next = ($page_number-1) * $count_per_page;
					$sql = "SELECT * FROM Orders WHERE id >= $next ORDER BY id ASC LIMIT $count_per_page";
					

			Transactions
			Auto
				DB::transaction(function () {
					DB::update('update users set votes = 1');
					DB::delete('delete from posts');
				}, number);		//number is optional, retries on deadlock
			Manual
				DB::beginTransaction();
				DB::rollBack();
				DB::commit();


					
	Query Builder					
	DB::table('tablename')
			returning query results
				rows/cols	->get()		foreach ($users as $user) {}, foreach ($users as $name => $user) {}
				1 row		->first()	$user->email;
				1 col 		->value('email');
				id column	->find(3);
				col list	->pluck('title');
				small chunks->chunk(100, function ($users) { });	//return false; to stop chucking
							->chunkById(100, function ($users) { }); 
				slow paced	->lazy()->each(function ($user) {});
							->lazyById()->each(function ($user) {};
							->exists()	//with if statement
							->doesntExist()	//with if statement
							->distinct()->get();
							->latest()->get();	//order by date
							->oldest()->get();	//order by date
							->inRandomOrder()->get();	//get random order
							->where('user','','value')->get();
							->whereDate('created_at', '2016-12-31')->get();
							->whereMonth('created_at', '12')->get();
							->whereDay('created_at', '31')->get();
							->whereYear('created_at', '2016')->get();
							->whereTime('created_at', '=', '11:20:45')->get();
							->offset(10)->limit(5)->get(); SAME AS ->skip(10)->take(5)->get();	//used for pagination
							
			Other queries
				insert
					->insert([email' => 'kayla@example.com','votes' => 0]);
					->insert([
						['email' => 'picard@example.com', 'votes' => 0],
						['email' => 'janeway@example.com', 'votes' => 0],
					]); 
					->insertOrIgnore([
						['id' => 1, 'email' => 'sisko@example.com'],
						['id' => 2, 'email' => 'archer@example.com'],
					]);													
					insert or update	
					->upsert([
						['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],
						['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]
					], ['departure', 'destination'], ['price']);	// fields that should be updated
				
				update
					->where('id', 1)->update(['votes' => 1]);
					->updateOrInsert(
						['name' => 'John'],	//where
						['votes' => '2']	//update or insert all with where
					);
				delete
					->where('votes', '>', 100)->delete();
		Raw SQL
		$users = DB::raw('Select * from tablename where user = ?',['data'])->get()
		
		Pagination
				->paginate(15);		//add page as field in request, increase by 1 for each page, or send page number directly		
				->paginate( $perPage = 15, $columns = ['*'], $pageName = 'users' );
				->orderBy('id')->cursorPaginate(15);
				->simplePaginate(15);	//without pages, just next and previous

			usage in blade
			<div class="container">
				@foreach ($users as $user)
					{{ $user->name }}
				@endforeach
			</div>

			{{ $users->links() }}
				->paginate()
				Method						Description
				$results->count()			Get the number of items for the current page.
				$results->currentPage()		Get the current page number.
				$results->firstItem()		Get the result number of the first item in the results.
				$results->getOptions()		Get the paginator options.
				$results->getUrlRange($start, $end)	Create a range of pagination URLs.
				$results->hasPages()		Determine if there are enough items to split into multiple pages.
				$results->hasMorePages()	Determine if there are more items in the data store.
				$results->items()			Get the items for the current page.
				$results->lastItem()		Get the result number of the last item in the results.
				$results->lastPage()		Get the page number of the last available page. (Not available when using simplePaginate).
				$results->nextPageUrl()		Get the URL for the next page.
				$results->onFirstPage()		Determine if the paginator is on the first page.
				$results->perPage()			The number of items to be shown per page.
				$results->previousPageUrl()	Get the URL for the previous page.
				$results->total()			Determine the total number of matching items in the data store. (Not available when using simplePaginate).
				$results->url($page)		Get the URL for a given page number.
				$results->getPageName()		Get the query string variable used to store the page.
				$results->setPageName($name)	Set the query string variable used to store the page.

				->cursorPaginate()
				Method						Description
				$results->count()			Get the number of items for the current page.
				$results->cursor()			Get the current cursor instance.
				$results->getOptions()		Get the paginator options.
				$results->hasPages()		Determine if there are enough items to split into multiple pages.
				$results->hasMorePages()	Determine if there are more items in the data store.
				$results->getCursorName()	Get the query string variable used to store the cursor.
				$results->items()			Get the items for the current page.
				$results->nextCursor()		Get the cursor instance for the next set of items.
				$results->nextPageUrl()		Get the URL for the next page.
				$results->onFirstPage()		Determine if the paginator is on the first page.
				$results->perPage()			The number of items to be shown per page.
				$results->previousCursor()	Get the cursor instance for the previous set of items.
				$results->previousPageUrl()	Get the URL for the previous page.
				$results->setCursorName()	Set the query string variable used to store the cursor.
				$results->url($cursor)		Get the URL for a given cursor instance.

	DB Migrations
		Make migration file
			php artisan make:migration nameoftable
				database/migrations/2021_12_03_104056_nameoftable.php
		
		Merge migrations into a single SQL file
			php artisan schema:dump
			php artisan schema:dump --prune		// Dump db schema and prune all migrations
				database/schema/
		
		Migration Structure
		A migration class contains two methods: up and down. The up method is used to add new tables, columns, or indexes to your database, while the down method should reverse the operations performed by the up method.
			
			protected $connection = 'mysql';	//name of dbconn
			public function up()
			{
			
				Schema::connection('mysql2')->create('users', function (Blueprint $table) {
					$table->id();
				});
				
				Schema::create('tablename', function (Blueprint $table) {	//uses default dbconn
					$table->engine = 'InnoDB';	//optional
					$table->id();
					$table->string('name');
					$table->string('user');
					$table->[index]('user');
					$table->timestamps();
				});
				
				Schema::table('tablename', function (Blueprint $table) {	//update
					$table->integer('votes');	//add new col
					$table->char('votes',100)->change();	//update attr	
					$table->renameColumn('fromcolname', 'tocolname');
					$table->dropColumn('votes');
					$table->dropColumn(['votes', 'avatar', 'location']);
					$table->integer('votes')->[modifier]();

					OR
					
					$table->after('password', function ($table) {		//add after col
						$table->string('address_line1');
						$table->string('address_line2');
						$table->string('city');
					});
					
				});
				
				Schema::rename($fromtablename, $totablename);
								
			}
			
			public function down()
			{
				Schema::drop('tablename');
				Schema::dropIfExists('tablename');

			}

			Index
				$table->primary('id');			//primary key.
				$table->primary(['id', 'parent_id']);
				$table->unique('email');	//	Adds unique.
				$table->unique('email', 'unique_email');
				$table->index('state');
		
			Columns types
				binary		//BLOB
				boolean
				char('name', 1000)
				id()	//for auto-incrementing primary key as id or 'colname'
				increments('id')	//for auto-incrementing primary key
				integer
				longText
				string('name', 100)
				text
				year
		
			Table update modifiers
				->after('column')
				->autoIncrement()
				->default($value)
				->nullable($value = true)
				->unique()

			Index modifiers
				->dropPrimary('users_id_primary');	Drop a primary key from the "users" table.
				->dropUnique('users_email_unique');	Drop a unique index from the "users" table.
				->dropIndex('geo_state_index');	Drop a basic index from the "geo" table.

		
		Check migrations
			php artisan migrate
			php artisan migrate:status

		Rolling Back
			php artisan migrate:rollback	//last migration
			php artisan migrate:reset		//all migrations
			php artisan migrate:refresh		//rollback all and migrate
			php artisan migrate:fresh		//drop all tables and migrate
			