Facades
	Crypt	(encrypter)
		supported(string $key, string $cipher)
		generateKey(string $cipher)
		encrypt(mixed $value, bool $serialize = true)
		encryptString(string $value)
		decrypt(string $payload, bool $unserialize = true)
		decryptString(string $payload)
		getJsonPayload(string $payload)
		validPayload(mixed $payload)
		validMac(array $payload)
		getKey()

	Cookie	(cookie)
		secondsUntil(DateTimeInterface|DateInterval|int $delay)
		availableAt(DateTimeInterface|DateInterval|int $delay = 0)
		parseDateInterval(DateTimeInterface|DateInterval|int $delay)
		currentTime()
		queue(...cookie params)
		make(string $name, string $value, int $minutes = 0, string|null $path = null, string|null $domain = null, bool|null $secure = null, bool $httpOnly = true, bool $raw = false, string|null $sameSite = null)
		forever(string $name, string $value, string|null $path = null, string|null $domain = null, bool|null $secure = null, bool $httpOnly = true, bool $raw = false, string|null $sameSite = null)
		forget(string $name, string|null $path = null, string|null $domain = null)
		expire(string $name, string|null $path = null, string|null $domain = null)

	DB	(db)
		connection(string|null $name = null)
		makeConnection(string $name)
		configuration(string $name)
		configure(Connection $connection, string $type)
		disconnect(string|null $name = null)
		reconnect(string|null $name = null)
		usingConnection(string $name, callable $callback)
		getDefaultConnection()
		setDefaultConnection(string $name)
		getConnections()

	DB (instance, db.connection)
		transaction(Closure $callback, int $attempts = 1)
		handleTransactionException(Throwable $e, int $currentAttempt, int $maxAttempts)
		beginTransaction()
		createTransaction()
		createSavepoint()
		commit()
		rollBack(int|null $toLevel = null)
		transactionLevel()
		afterCommit(callable $callback)
		table(Closure|Builder|string $table, string|null $as = null)
		query()
		selectOne(string $query, array $bindings = [], bool $useReadPdo = true)
		select(string $query, array $bindings = [], bool $useReadPdo = true)
		insert(string $query, array $bindings = [])
		update(string $query, array $bindings = [])
		delete(string $query, array $bindings = [])
		statement(string $query, array $bindings = [])
		reconnect()
		disconnect()
		beforeExecuting(Closure $callback)
		raw(mixed $value)
		getName()
		getDatabaseName()
		setDatabaseName(string $database)

	File	(files)
		exists(string $path)
		missing(string $path)
		get(string $path, bool $lock = false)
		requireOnce(string $path, array $data = [])
		put(string $path, string $contents, bool $lock = false)
		replace(string $path, string $content)
		replaceInFile(array|string $search, array|string $replace, string $path)
		prepend(string $path, string $data)
		append(string $path, string $data)
		chmod(string $path, int|null $mode = null)
		delete(string|array $paths)
		move(string $path, string $target)
		copy(string $path, string $target)
		name(string $path)
		basename(string $path)
		dirname(string $path)
		extension(string $path)
		guessExtension(string $path)
		type(string $path)
		mimeType(string $path)
		size(string $path)
		lastModified(string $path)
		isDirectory(string $directory)
		isReadable(string $path)
		isWritable(string $path)
		isFile(string $file)
		glob(string $pattern, int $flags = 0)
		files(string $directory, bool $hidden = false)
		allFiles(string $directory, bool $hidden = false)
		directories(string $directory)
		ensureDirectoryExists(string $path, int $mode = 0755, bool $recursive = true)
		makeDirectory(string $path, int $mode = 0755, bool $recursive = false, bool $force = false)
		moveDirectory(string $from, string $to, bool $overwrite = false)
		copyDirectory(string $directory, string $destination, int|null $options = null)
		deleteDirectory(string $directory, bool $preserve = false)
		deleteDirectories(string $directory)
		cleanDirectory(string $directory)

	Storage (instance, filesystem.disk)
		get(string $path)
		readStream(string $path)
		put(string $path, string|resource $contents, mixed $options = [])
		writeStream(string $path, resource $resource, array $options = [])
		prepend(string $path, string $data)
		append(string $path, string $data)
		delete(string|array $paths)
		copy(string $from, string $to)
		move(string $from, string $to)
		size(string $path)
		files(string|null $directory = null, bool $recursive = false)
		allFiles(string|null $directory = null)
		directories(string|null $directory = null, bool $recursive = false)
		allDirectories(string|null $directory = null)
		makeDirectory(string $path)
		deleteDirectory(string $directory)

	Mail	(mailer)
		alwaysFrom(string $address, string|null $name = null)
		alwaysReplyTo(string $address, string|null $name = null)
		to(mixed $users)
		cc(mixed $users)
		bcc(mixed $users)
		html(string $html, mixed $callback)
		plain(string $view, array $data, mixed $callback)
		sendMailable(Mailable $mailable)
		failures()

	Request	(request())
		isJson()
		accepts(string|array $contentTypes)
		acceptsAnyContentType()
		acceptsJson()
		acceptsHtml()
		flash()
		flashOnly(array|mixed $keys)
		flashExcept(array|mixed $keys)
		flush()
		server(string|null $key = null, string|array|null $default = null)
		hasHeader(string $key)
		header(string|null $key = null, string|array|null $default = null)
		bearerToken()
		exists(string|array $key)
		has(string|array $key)
		hasAny(string|array $keys)
		filled(string|array $key)
		isNotFilled(string|array $key)
		anyFilled(string|array $keys)
		missing(string|array $key)
		isEmptyString(string $key)
		keys()
		all(array|mixed|null $keys = null)
		input(string|null $key = null, mixed $default = null)
		collect(array|string|null $key = null)
		only(array|mixed $keys)
		except(array|mixed $keys)
		query(string|null $key = null, string|array|null $default = null)
		post(string|null $key = null, string|array|null $default = null)
		hasCookie(string $key)
		cookie(string|null $key = null, string|array|null $default = null)
		allFiles()
		hasFile(string $key)
		isValidFile(mixed $file)
		file(string|null $key = null, mixed $default = null)
		retrieveItem(string $source, string $key, string|array|null $default)
		dd(array|mixed ...$keys)
		dump(array $keys = [])
		method()
		url()
		fullUrl()
		fullUrlWithQuery(array $query)
		fullUrlWithoutQuery($keys)
		segments()
		ajax()
		secure()
		ip()
		ips()
		userAgent()
		merge(array $input)
		replace(array $input)
		json(string|null $key = null, mixed $default = null)
		session()
		getSession()
		fingerprint()
		toArray()
		validate(array $rules, mixed $params)
		validateWithBag(string $errorBag, array $rules, mixed $params)

	
	Response
		make(array|string $content = '', int $status = 200, array $headers = [])
		noContent(int $status = 204, array $headers = [])
		view(string|array $view, array $data = [], int $status = 200, array $headers = [])
		json(mixed $data = [], int $status = 200, array $headers = [], int $options = 0)
		stream(Closure $callback, int $status = 200, array $headers = [])
		streamDownload(Closure $callback, string|null $name = null, array $headers = [], string|null 
		download(SplFileInfo|string $file, string|null $name = null, array $headers = [], string|null $disposition = 'attachment')
		file(SplFileInfo|string $file, array $headers = [])
		redirectTo(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
		redirectToRoute(string $route, mixed $parameters = [], int $status = 302, array $headers = [])
		redirectToAction(string $action, mixed $parameters = [], int $status = 302, array $headers = [])
		redirectGuest(string $path, int $status = 302, array $headers = [], bool|null $secure = null)	//put previous URL in session
		redirectToIntended(string $default = '/', int $status = 302, array $headers = [], bool|null $secure = null)

	Response	(instance-> reponse())
		status()
		statusText()
		content()
		getOriginalContent()
		header(string $key, array|string $values, bool $replace = true)
		withHeaders(HeaderBag|array $headers)
		cookie(Cookie|mixed $cookie)
		withoutCookie(Cookie|mixed $cookie, string|null $path = null, string|null $domain = null)
		setContent(mixed $content)
		morphToJson(mixed $content)

	Route	(router)
		static void
		get(string $uri, array|string|callable $action = null)
		post(string $uri, array|string|callable $action = null)
		put(string $uri, array|string|callable $action = null)
		patch(string $uri, array|string|callable $action = null)
		delete(string $uri, array|string|callable $action = null)
		options(string $uri, array|string|callable $action = null)
		any(string $uri, array|string|callable|null $action = null)
		fallback(array|string|callable|null $action)
		redirect(string $uri, string $destination, int $status = 302)
		view(string $uri, string $view, array $data = [], int|array $status = 200, array $headers = [])
		match(array|string $methods, string $uri, array|string|callable $action = null)
		group(array $attributes, Closure|string $routes)
		createRoute(array|string $methods, string $uri, mixed $action)
		dispatch(Request $request)
		dispatchToRoute(Request $request)
		prepareResponse(Request $request, mixed $response)
		pattern(string $key, string $pattern)
		getCurrentRequest()
		resource(...)

	Store (instance,session.store)
		start()
		save()
		all()
		only(array $keys)
		exists(string|array $key)
		missing(string|array $key)
		has(string|array $key)
		get(string $key, mixed $default = null)
		pull(string $key, mixed $default = null)		//forgets after getting it
		hasOldInput(string|null $key = null)
		getOldInput(string|null $key = null, mixed $default = null)
		replace(array $attributes)
		put(string|array $key, mixed $value = null)
		push(string $key, mixed $value)
		flash(string $key, mixed $value = true)
		now(string $key, mixed $value)
		reflash()
		keep(array|mixed $keys = null)
		flashInput(array $value)
		remove(string $key)
		forget(string|array $keys)
		flush()
		invalidate()
		regenerate(bool $destroy = false)
		migrate(bool $destroy = false)
		isStarted()
		getName()
		getId()
		isValidId(string $id)
		generateSessionId()
		token()
		regenerateToken()
		previousUrl()
		setPreviousUrl(string $url)

	Redirect	(redirect)
		home(int $status = 302)
		back(int $status = 302, array $headers = [], mixed $fallback = false)
		refresh(int $status = 302, array $headers = [])
		guest(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
		intended(string $default = '/', int $status = 302, array $headers = [], bool|null $secure = null)	//to prevous location
		setIntendedUrl(string $url)
		to(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
		away(string $path, int $status = 302, array $headers = [])
		secure(string $path, int $status = 302, array $headers = [])
		route(string $route, mixed $parameters = [], int $status = 302, array $headers = [])
		action(string|array $action, mixed $parameters = [], int $status = 302, array $headers = [])	// to controller action
		createRedirect(string $path, int $status, array $headers)		
	