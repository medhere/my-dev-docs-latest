Request Password Reset

    use Illuminate\Support\Facades\Password;
    
    Route::post('/forgot-password', function (Request $request) {
        $request->validate(['email' => 'required|email']);
    
        $status = Password::sendResetLink(
            $request->only('email')
        );
    
        return $status === Password::RESET_LINK_SENT
                    ? back()->with(['status' => __($status)])
                    : back()->withErrors(['email' => __($status)]);
    })->middleware('guest')->name('password.email');

Handle Password Reset
    use Illuminate\Support\Facades\Hash;
    use Illuminate\Support\Facades\Password;
    use Illuminate\Support\Str;
    
    Route::post('/reset-password', function (Request $request) {
        $request->validate([
            'token' => 'required',
            'email' => 'required|email',
            'password' => 'required|min:8|confirmed',
        ]);
    
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function (User $user, string $password) {
                $user->forceFill([
                    'password' => Hash::make($password)
                ])->setRememberToken(Str::random(60));
    
                $user->save();
    
                event(new PasswordReset($user));
            }
        );
    
        return $status === Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withErrors(['email' => [__($status)]]);
    })->middleware('guest')->name('password.update');


    Password::
    RESET_LINK_SENT Constant representing a successfully sent reminder.
    PASSWORD_RESET Constant representing a successfully reset password.
    INVALID_USER Constant representing the user not found response.
    INVALID_TOKEN Constant representing an invalid token.
    RESET_THROTTLED Constant representing a throttled reset attempt.


Clear Password Tokens
    $schedule->command('auth:clear-resets')->everyFifteenMinutes();


Hash
use Illuminate\Support\Facades\Hash; 
    $request->user()->fill([
        'password' => Hash::make($request->newPassword)
    ])->save();

    $hashed = Hash::make('password', [
        'rounds' => 12,
    ]);

    $hashed = Hash::make('password', [
        'memory' => 1024,
        'time' => 2,
        'threads' => 2,
    ]);

    Verifying That A Password Matches A Hash
    if (Hash::check('plain-text', $hashedPassword)) {
        // The passwords match...
    }