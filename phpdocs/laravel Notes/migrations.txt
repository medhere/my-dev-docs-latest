DB Migrations
		Make migration file
			php artisan make:migration nameoftable
				database/migrations/2021_12_03_104056_nameoftable.php
		
		Merge migrations into a single SQL file
			php artisan schema:dump
			php artisan schema:dump --prune		// Dump db schema and prune all migrations
				database/schema/
		
		Migration Structure
		A migration class contains two methods: up and down. The up method is used to add new tables, columns, or indexes to your database, while the down method should reverse the operations performed by the up method.
			
			protected $connection = 'mysql';	//name of dbconn
			public function up()
			{
			
				Schema::connection('mysql2')->create('users', function (Blueprint $table) {
					$table->id();
				});

                if (Schema::hasTable('users')) {
                    // The "users" table exists...
                }
                
                if (Schema::hasColumn('users', 'email')) {
                    // The "users" table exists and has an "email" column...
                }
				
                //create table
				Schema::create('tablename', function (Blueprint $table) {	//uses default dbconn
					$table->engine = 'InnoDB';	//optional
                    $table->charset = 'utf8mb4'; //optional
                    $table->collation = 'utf8mb4_unicode_ci'; //optional
				
                	$table->id();
					$table->string('name');
					$table->string('user');
					$table->[index]('user');
					$table->timestamps();
				});
				
                //update table
				Schema::table('tablename', function (Blueprint $table) {	//update
					$table->integer('votes');	//add new col
					$table->char('votes',100)->change();	//update attr	
					$table->renameColumn('fromcolname', 'tocolname');
					$table->dropColumn('votes');
					$table->dropColumn(['votes', 'avatar', 'location']);
					$table->integer('votes')->[modifier]();

					OR
					
					$table->after('password', function ($table) {		//add after col
						$table->string('address_line1');
						$table->string('address_line2');
						$table->string('city');
					});
					
				});
				
                //rename table
				Schema::rename($fromtablename, $totablename);
								
			}
			
			public function down()
			{
				Schema::drop('tablename');
				Schema::dropIfExists('tablename');

			}
		
			Columns types
				bigInteger
				binary('name')	//BLOB
				boolean()
				char('name', 1000)
				decimal('quantity', 8, 2)
				double('quantity', 8, 2)
                datetime()
                date()
				enum('difficulty', ['easy', 'hard']);
				float('amount', 8, 2);
				id()	//for auto-incrementing primary key as id or 'colname'
				increments('id')	//for auto-incrementing primary key
				integer
				longText
				rememberToken
                softDeletes
				string('name', 100)
				text
				time
				timestamp
				timestamps
				uuid
				year

			Index
				$table->primary('id');			//primary key.
				$table->primary(['id', 'parent_id']);
				$table->unique('email');	//Adds unique.
				$table->unique('email', 'unique_email');
				$table->index('state');
				$table->fullText('body');	//Adds a full text index (MySQL/PostgreSQL).
				$table->fullText('body')->language('english');	//Adds a full text index of the specified language (PostgreSQL).
				$table->spatialIndex('location');	//Adds a spatial index (except SQLite).

		
			Table update modifiers
				->after('column')
				->autoIncrement()	Set INTEGER columns as auto-incrementing (primary key).
				->charset('utf8mb4')	Specify a character set for the column (MySQL).
				->collation('utf8mb4_unicode_ci')	Specify a collation for the column (MySQL/PostgreSQL/SQL Server).
				->comment('my comment')	Add a comment to a column (MySQL/PostgreSQL).
				->default($value)	Specify a "default" value for the column.
				->first()	Place the column "first" in the table (MySQL).
				->from($integer)	Set the starting value of an auto-incrementing field (MySQL / PostgreSQL).
				->invisible()	Make the column "invisible" to SELECT * queries (MySQL).
				->nullable($value = true)	Allow NULL values to be inserted into the column.
				->unsigned()	Set INTEGER columns as UNSIGNED (MySQL).
				->useCurrent()	Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value.
				->useCurrentOnUpdate()	Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated (MySQL).
				->unique()

			Index modifiers
				->dropPrimary('users_id_primary');	Drop a primary key from the "users" table.
				->dropUnique('users_email_unique');	Drop a unique index from the "users" table.
				->dropIndex('geo_state_index');	Drop a basic index from the "geo" table.
				->dropFullText('posts_body_fulltext');	Drop a full text index from the "posts" table.
				->dropSpatialIndex('geo_location_spatialindex');	Drop a spatial index from the "geo" table (except SQLite).

			Foreign
				$table->foreign('user_id')->references('id')->on('users');
				$table->foreignId('user_id')->constrained();
				$table->foreignId('user_id')->constrained(
						table: 'users', indexName: 'posts_user_id'
					);
				$table->foreignId('user_id')
				->constrained()
				->onUpdate('cascade')
				->onDelete('cascade');

				$table->cascadeOnUpdate();	Updates should cascade.
				$table->restrictOnUpdate();	Updates should be restricted.
				$table->cascadeOnDelete();	Deletes should cascade.
				$table->restrictOnDelete();	Deletes should be restricted.
				$table->nullOnDelete();	Deletes should set the foreign key value to null.

				$table->foreignId('user_id')
					->nullable()
					->constrained();


		Check migrations
			php artisan migrate
			php artisan migrate:status

		Rolling Back
			php artisan migrate:rollback	//last migration
			php artisan migrate:reset		//all migrations
			php artisan migrate:refresh		//rollback all and migrate
			php artisan migrate:fresh		//drop all tables and migrate
			