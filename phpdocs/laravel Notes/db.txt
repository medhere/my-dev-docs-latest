Database
	config
		config/database.php	OR .env
			normal
				'mysql' => [
					'driver' => 'mysql',
					'database' => 'database',
					'username' => 'root',
					'password' => '',
					'charset' => 'utf8mb4',
					'collation' => 'utf8mb4_unicode_ci',
					'prefix' => '',
				]
			using URL( url (or corresponding DATABASE_URL environment variable))
				driver://username:password@host:port/database?options
				mysql://root:password@127.0.0.1/forge?charset=UTF-8
					can set up multiple dbs
		use Illuminate\Support\Facades\DB;
		
	Using multiple dbase conns
		$users = DB::connection('sqlite');
		$users->select(...);
		$users = DB::connection('sqlite')->select(...);
			//$users = DB::select|insert|update|delete|statement('query id = ?', [1]);	// symbol binding for sql injection
			//$users = DB::select|insert|update|delete|statement('query id = :id', ['id' => 1]);	//named binding for sql injection

	Connecting To The Database CLI
		php artisan db mysql
		
	SQL Queries
			$users = DB::select('select * from users');		//select
			$users = DB::select('select * from users where active = ?', [1]);	// symbol binding for sql injection
			$results = DB::select('select * from users where id = :id', ['id' => 1]);	//named binding for sql injection			
				return view('user.index', ['users' => $users]);	
				foreach ($users as $user) {
					echo $user->name;
				}
		
			DB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);		//insert
			$affected = DB::update('update users set votes = 100 where name = ?',['Anita']);	//update
			$deleted = DB::delete('delete from users');		//delete
			DB::statement('drop table users');		//general sql statement
			
			Pagination
				//Offset Pagination...
				The SQL query below says "return only 10 records, start on record 16 (OFFSET 15)":
				SELECT * FROM Orders LIMIT 10 OFFSET 15;
					$next_offset = $page_number * $count_per_page;
					$sql = "SELECT * FROM Orders LIMIT $count_per_page OFFSET $next_offset";

				//Cursor Pagination...
				SELECT * from Orders WHERE id > 15 ORDER BY id ASC LIMIT 15;
					if($page_number>1) $next=1;
					$next = ($page_number-1) * $count_per_page;
					$sql = "SELECT * FROM Orders WHERE id >= $next ORDER BY id ASC LIMIT $count_per_page";
					

			Transactions
			Auto
				DB::transaction(function () {
					DB::update('update users set votes = 1');
					DB::delete('delete from posts');
				}, 10);		//number is optional, retries on deadlock
			Manual
				DB::beginTransaction();
				DB::rollBack();
				DB::commit();


					
	Query Builder
		Raw SQL
			$users = DB::raw('Select * from tablename where user = ?',['data'])->get()
				->selectRaw('price * ? as price_with_tax', [1.0825])
				->select(DB::raw('sum(order_lines.quantity*order_lines.per_qty) AS total_sales'))
				->whereRaw | orWhereRaw('price > IF(state = "TX", ?, 100)', [200])
				->havingRaw | orHavingRaw('SUM(price) > ?', [2500])
				->orderByRaw('updated_at - created_at DESC')
				->groupByRaw('city, state')

		Select
		DB::table('tablename')
			returning query results
				retrieve data			
					rows/cols	->get()		foreach ($users as $user) {}, foreach ($users as $name => $user) {}
								->get(['column1','column2'])
					1 row		->first()	$array->key;
					id column	->find(3);
					col list	->pluck('title');
					1 col 		->value('email');
				slow paced	->lazy()
							->lazyById()->each(function ($user) {};
							->exists()	//with if statement
							->doesntExist()	//with if statement
							->distinct()
							->inRandomOrder()	//get random order
		Where							
			->where | orWhere('user','','value')->get();
			->where(function ($query) use($var) {
               $query->where('votes', '>', 100)
                     ->orWhere('title', '=', 'Admin');
           	})
			->where([
				['status', '=', '1'],
				['subscribed', '<>', '1'],
			])
			
			->whereBetween | orWhereBetween | whereNotBetween | orWhereNotBetween('column', [1, 100])
			->whereIn | whereNotIn | orWhereIn | orWhereNotIn('column', [1, 2, 3])
			->whereNull | whereNotNull | orWhereNull | orWhereNotNull('column')
			->whereBetweenColumns | whereNotBetweenColumns | orWhereBetweenColumns | orWhereNotBetweenColumns('weight', ['minimum_allowed_weight', 'maximum_allowed_weight'])
			->whereColumn | orWhereColumn('updated_at', '>', 'created_at') 
				->whereColumn([
						['first_name', '=', 'last_name'],
						['updated_at', '>', 'created_at'],
				])

			->whereDate('created_at', '2016-12-31')->get();
			->whereMonth('created_at', '12')->get();
			->whereDay('created_at', '31')->get();
			->whereYear('created_at', '2016')->get();
			->whereTime('created_at', '=', '11:20:45')->get();

			->whereExists(function ($query) {
						$query->select(DB::raw(1))
								->from('orders')
								->whereColumn('orders.user_id', 'users.id');
					})
			->whereFullText('bio', 'web developer')


		When Conditional
			->when($role, function ($query, string $role) {
					$query->where('role_id', $role);
				})
				
			->when($sortByVotes, function ($query, bool $sortByVotes) {
					$query->orderBy('votes');
				}, function ($query) {
					//if first closure fails
					$query->orderBy('name');
				})

		Ordering
			->orderBy('name', 'desc')
			->orderBy('email', 'asc')
			$query->reorder('email', 'desc')
			->latest()	//order by date
			->oldest()	//order by date
			->inRandomOrder()
 
		Grouping and Having
			->groupBy('account_id')
			->having('account_id', '>', 100)
			->havingBetween('number_of_orders', [5, 15])
			->havingBetween('number_of_orders', [5, 15])

		Limit & Offset
			->offset(10)->limit(5)->get(); SAME AS ->skip(10)->take(5)->get();	//used for pagination
		
		Aggregates
			->count()
			->max('columnname')
			->min('columnname')
			->avg('columnname')
			->sum('columnname')					

		Joins
			->join('contacts', 'users.id', '=', 'contacts.user_id')
			->leftJoin('posts', 'users.id', '=', 'posts.user_id')
			->rightJoin('posts', 'users.id', '=', 'posts.user_id')
			->crossJoin('colors')
			->join('contacts', function (JoinClause $join) {
				$join->on('users.id', '=', 'contacts.user_id')->orOn(/* ... */);
			})
			->join('contacts', function (JoinClause $join) {
				$join->on('users.id', '=', 'contacts.user_id')
					->where('contacts.user_id', '>', 5);
			})
				->select('users.*', 'contacts.phone', 'orders.price')

		Union
			->union(query)

		Insert
			->insert([email' => 'kayla@example.com','votes' => 0]);
			->insert([
				['email' => 'picard@example.com', 'votes' => 0],
				['email' => 'janeway@example.com', 'votes' => 0],
			]); 
			retrieve id
			$id = DB::table('users')->insertGetId(
				['email' => 'john@example.com', 'votes' => 0],
				'id' //optional
			);
			->insertOrIgnore([
				['id' => 1, 'email' => 'sisko@example.com'],
				['id' => 2, 'email' => 'archer@example.com'],
			]);													
			insert or update	
			->upsert(
				[
					['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],
					['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]
				], 
				['departure', 'destination'], //uniquely identify records with primary or unique key
				['price'] // fields that should be updated if exists
			);	
		
		Update
			->where('id', 1)->update(['votes' => 1]);
			->updateOrInsert(
				['email' => 'john@example.com', 'name' => 'John'],	//find this record
				['votes' => '2']	//update this if found, else create all
			);
			->increment('votes', 5);
			->increment('votes', 1, ['name' => 'John']); //with extra updated fields
			->decrement('votes');
			->decrement('votes', 5);
			->incrementEach | decrementEach([
				'votes' => 5,
				'balance' => 100,
			]);

		Delete
			->where('votes', '>', 100)->delete();
			->truncate();

		Locking
			 ->sharedLock()
	        ->lockForUpdate()

		Querying Relationships
			whereBelongsTo($user)->get();

		Pagination
				->paginate(15);		//add page as field in request, increase by 1 for each page, or send page number directly		
				->paginate( $perPage = 15, $columns = ['*'], $pageName = 'users' );
				->orderBy('id')->cursorPaginate(15);
				->simplePaginate(15);	//without pages, just next and previous

			usage in blade
			<div class="container">
				@foreach ($users as $user)
					{{ $user->name }}
				@endforeach
			</div>

			{{ $users->links() }}
				->paginate()
				Method						Description
				$results->count()			Get the number of items for the current page.
				$results->currentPage()		Get the current page number.
				$results->firstItem()		Get the result number of the first item in the results.
				$results->getOptions()		Get the paginator options.
				$results->getUrlRange($start, $end)	Create a range of pagination URLs.
				$results->hasPages()		Determine if there are enough items to split into multiple pages.
				$results->hasMorePages()	Determine if there are more items in the data store.
				$results->items()			Get the items for the current page.
				$results->lastItem()		Get the result number of the last item in the results.
				$results->lastPage()		Get the page number of the last available page. (Not available when using simplePaginate).
				$results->nextPageUrl()		Get the URL for the next page.
				$results->onFirstPage()		Determine if the paginator is on the first page.
				$results->perPage()			The number of items to be shown per page.
				$results->previousPageUrl()	Get the URL for the previous page.
				$results->total()			Determine the total number of matching items in the data store. (Not available when using simplePaginate).
				$results->url($page)		Get the URL for a given page number.
				$results->getPageName()		Get the query string variable used to store the page.
				$results->setPageName($name)	Set the query string variable used to store the page.

				->cursorPaginate()
				Method						Description
				$results->count()			Get the number of items for the current page.
				$results->cursor()			Get the current cursor instance.
				$results->getOptions()		Get the paginator options.
				$results->hasPages()		Determine if there are enough items to split into multiple pages.
				$results->hasMorePages()	Determine if there are more items in the data store.
				$results->getCursorName()	Get the query string variable used to store the cursor.
				$results->items()			Get the items for the current page.
				$results->nextCursor()		Get the cursor instance for the next set of items.
				$results->nextPageUrl()		Get the URL for the next page.
				$results->onFirstPage()		Determine if the paginator is on the first page.
				$results->perPage()			The number of items to be shown per page.
				$results->previousCursor()	Get the cursor instance for the previous set of items.
				$results->previousPageUrl()	Get the URL for the previous page.
				$results->setCursorName()	Set the query string variable used to store the cursor.
				$results->url($cursor)		Get the URL for a given cursor instance.

	