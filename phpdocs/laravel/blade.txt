blade
	resources/views/*.blade.php
	resources/views/folder/*.blade.php
	
	display data
		Hello, {{ $name }}.		// display content of name variable from view()
		The current UNIX timestamp is {{ time() }}.	// use php directly
		Hello, {!! $name !!}.	// no htmpchar escape		
		Hello, @{{ name }}.		// not rendered as blade, as js
		@verbatim	//multiline no blade statements	
			<div class="container">
				Hello, {{ name }}.
			</div>
		@endverbatim
		{{-- This comment will not be present in the rendered HTML --}}		//comments
		
		Rendering JSON to JS
			var app = <?php echo json_encode($array); ?>;
			var app = {{ Illuminate\Support\Js::from($array) }};
			var app = {{ Js::from($array) }};
		
	Blade Directives
		If Statements
			@if (count($records) === 1)
				I have one record!
			@elseif (count($records) > 1)
				I have multiple records!
			@else
				I don't have any records!
			@endif

		@unless directive
			@unless (Auth::check())
				You are not signed in.
			@endunless

		@isset and @empty directives
			@isset($records)
				// $records is defined and is not null...
			@endisset

			@empty($records)
				// $records is "empty"...
			@endempty
	
		Authentication Directives
			@auth
				// The user is authenticated...
			@endauth

			@guest
				// The user is not authenticated...
			@endguest

			@auth('admin')
				// The user is authenticated...
			@endauth

			@guest('admin')
				// The user is not authenticated...
			@endguest
		
		Environment Directives
			@production
				// Production specific content...
			@endproduction

			@env('staging')
				// The application is running in "staging"...
			@endenv

			@env(['staging', 'production'])
				// The application is running in "staging" or "production"...
			@endenv

		Section Directives

			@hasSection('navigation')
				<div class="pull-right">
					@yield('navigation')
				</div>

				<div class="clearfix"></div>
			@endif

			@sectionMissing('navigation')
				<div class="pull-right">
					@include('default-navigation')
				</div>
			@endif
			
		Switch Statements
			@switch($i)
				@case(1)
					First case...
					@break

				@case(2)
					Second case...
					@break

				@default
					Default case...
			@endswitch

		Loops
			@for ($i = 0; $i < 10; $i++)
				The current value is {{ $i }}
			@endfor

			@foreach ($users as $user)
				<p>This is user {{ $user->id }}</p>
			@endforeach

			@forelse ($users as $user)
				<li>{{ $user->name }}</li>
			@empty
				<p>No users</p>
			@endforelse

			@while (true)
				<p>I'm looping forever.</p>
			@endwhile	
			
	Conditional Classes
		<span @class([
			'p-4',
			'font-bold' => $isActive,
			'text-gray-500' => ! $isActive,
			'bg-red' => $hasError,
		])></span>
	
	Form Attributes
		@checked($var)
		@selected($var)
		@disabled($var)
		@readonly($var)
		@required($var)

	Including Subviews
		//Blade components are are better
		<div>@include('shared.errors')</div>
		@include('view.name', ['status' => 'complete'])	//pass data to included view
		@includeIf('view.name', ['status' => 'complete'])
		@includeWhen($boolean, 'view.name', ['status' => 'complete'])
		@includeUnless($boolean, 'view.name', ['status' => 'complete'])
		@each('view.name', $jobs, 'job', 'view.empty')	// (view, array or collection, var name, (optional)view if array empty), use the @foreach and @include to inherit parent var
				
	Raw php
		@php
			$counter = 1;
		@endphp

		@php ($counter = 1)
	
	Components
		Class-based components
		php artisan make:component nameofcomponent
		php artisan make:component folder/nameofcomponent
		php artisan make:component folder.nameofcomponent --view //anonymous component with --view
			app/View/Components/nameofcomponent.php
			resources/views/components/nameofcomponent.blade.php

			Slots, Attributes and Slot Attributes
				<span class="alert-title">{{ $title }}</span>
				<div {{ $attributes }} class="alert-{{ $type }}">
					{{ $slot }}
					{{ $message }}
					<p {{$text->attributes}} >
						{{$text}}
					</p>
				</div>

				<div {{ $attributes->merge(['class' => $type]) }}> 
					{{ $message }} 
				</div> //<x-alert type="error" :message="$message" class="mb-4"/> //> class="mb-4 error"

				<button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) }}> 
					{{ $slot }} 
				</button>

				<div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller '.$data-controller)]) }}> 
					{{ $slot }} 
				</div>

				@if ($attributes->has('class'))
					<div>Class attribute is present</div>
				@endif

				{{ $attributes->get('class') }}	//retrieve					

							
			usage in blase	//use kebab-case
				<x-|folder.|nameofcomponent type="1" :message="$message" class="classname"/>	//all other attributes rending in attributes, use : when adding $variables 
				OR
				<x-nameofcomponent user-id="1" :message="$message" class="classname">
					<x-slot:title> Server Error </x-slot> //goes to {{$title}}
					<x-slot name="title"> Server Error </x-slot>	//goes to {{$title}}
					<strong>Whoops!</strong> Something went wrong!	//will fit into {{$slot}}
				</x-nameofcomponent>
				
				PHP expressions and variables use the : character as a prefix					

		Anonymous components
			resources/views/components/nameofcomponent.blade.php
				@props(['type','message'])
				@props(['type' => 'info', 'message'])	//type default to info			
				<div {{ $attributes }}>
					{{ $slot }}					
					{{ type }} : {{ $message }}
				</div>
				
					using $attributes
						{{ $attributes->merge(['type' => 'button']) }}	//for default, will be replaced
						{{ $attributes->merge(['class' => 'green']) }}	//for class, will merge
						@if ($attributes->has('class'))
							<div>Class attribute is present</div>
						@endif
						{{ $attributes->get('class') }}	//retrieve
				
				usage in blade
					<x-folder.nameofcomponent/>
					<x-nameofcomponent type="1" :message="$message" class="classname"/>	//all other attributes rending in attributes
						//can also render as layout component			
				
			grouping
			/resources/views/components/accordion/index.blade.php
				@prop(['prop' => 'propdefault'])
				<ul {{ $attributes->merge(['class' => 'bg-'.$prop.'-200']) }}>
					{{ $slot }}
				</ul>
				
			/resources/views/components/accordion/item.blade.php					
				@aware(['prop' => 'propdefault'])	//access parent $prop with @aware
				<li {{ $attributes->merge(['class' => 'text-'.$color.'-800']) }}>
					{{ $slot }}
				</li>

				usage in blade
				<x-accordion>	//from index.blade.php
					<x-accordion.item>	//from item.blade/php
					</x-accordion.item>
				</x-accordion>	
			
		Dynamic Components
			render the component based on a runtime value or variable:
			<x-dynamic-component :component="$componentName" class="mt-4" />

		Using Template Inheritance
			Defining A Layout
			<!-- resources/views/layouts/app.blade.php -->

			<html>
				<head>
					<title>App Name - @yield('title')</title>
				</head>
				<body>
					@section('sidebar')
						This is the master sidebar.
					@show

					<div class="container">
						@yield('content', 'Default content')
					</div>
				</body>
			</html>

			Extending A Layout
			@extends Blade specifies which layout the child view should "inherit".
			inject content into the layout's sections using @section
			the contents of these sections will be displayed in the layout using @yield:

			<!-- resources/views/child.blade.php -->
			@extends('layouts.app')
			@section('title', 'Page Title')
			@section('sidebar')
				@parent
				<p>This is appended to the master sidebar.</p>
			@endsection

			@section('content')
				<p>This is my body content.</p>
			@endsection

			Directives
			@section defines a section of content
			@yield directive displays the contents of a given section.
			@endsection directive will only define a section
			@show will define a section and immediately yield the section.			
			@parent directive to append (rather than overwriting) content to the layout's sidebar. 
			
	
	Forms
		CSRF Field
			<form method="POST" action="/profile">
				@csrf
			</form>

		Method Field
			PUT, PATCH, or DELETE added to a hidden _method field
			<form action="/foo/bar" method="POST">
				@method('PUT')
			</form>

		Validation Errors
			The @error checks if validation error messages exist
			echo the $message variable to display the error message
			use the @else directive to render content when there is not an error for an attribute
				/resources/views/post/create.blade.php
					<label for="title">Post Title</label>
					<input id="title" type="text" class="@error('title') is-invalid @else is-valid @enderror">
					@error('title')
						<div class="alert alert-danger">{{ $message }}</div>
					@enderror
			
	Stacks
		@push('scripts')
			<script src="/example.js"></script>
		@endpush

		@stack('scripts')

		@push('scripts')
			This will be second...
		@endpush
		@prepend('scripts')
			This will be first...
		@endprepend
	
	Service Injection
		@inject('metrics', 'App\Services\MetricsService')
		<div>
			Monthly Revenue: {{ $metrics->monthlyRevenue() }}.
		</div>