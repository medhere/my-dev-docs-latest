Install
    composer require laravel/sanctum
    php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
    php artisan migrate

    add Sanctum's middleware to your api middleware group within your application's app/Http/Kernel.php file:
    'api' => [
        \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
        \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
        \Illuminate\Routing\Middleware\SubstituteBindings::class,
    ],

CORS
    config/cors.php
    supports_credentials: true.
    
    in js, set axios.defaults.withCredentials = true;

    set session cookie domain, prefixing the domain with a leading . in config/session.php
    'domain' => '.domain.com',

Add to User Model
    use Laravel\Sanctum\HasApiTokens;
    class User extends Authenticatable
    {
        use HasApiTokens, HasFactory, Notifiable;
    }

Login and send token
        $token = $user->createToken(
            $user->name.'_'.Carbon::now(), // The name of the token
            ['*'],                         // Whatever abilities you want
            now()->addDays(6).     // The expiration date for remember_me
        );
        //createToken method located at vendor/laravel/sanctum/src/HasApiTokens.php.

    $token = $user->createToken($request->name);
    $token = $user->createToken($request->name, ['server:update'], now()->addDays(15)); //with ability and expiry
    return ['token' => $token->plainTextToken];
        $token->plainTextToken
        $token->accessToken->name;
        $token->accessToken->id;
        $token->accessToken->abilities;

Token Abilities
	assign
		$user->createToken('token-name', ['server:update'])->plainTextToken;
	usage
		if ($user->tokenCan('server:update')) {
			// ...
		}
       $request->user()->tokenCan('server:update')
	   
	middleware
	$middlewareAliases property of app/Http/Kernel.php
		'abilities' => \Laravel\Sanctum\Http\Middleware\CheckAbilities::class, //has all abilities
		'ability' => \Laravel\Sanctum\Http\Middleware\CheckForAnyAbility::class,	//has at least one

	usage
		Route::get('/orders', function () {
			// Token has both "check-status" and "place-orders" abilities...
		})->middleware(['auth:sanctum', 'abilities:check-status,place-orders']);

		Route::get('/orders', function () {
			// Token has the "check-status" or "place-orders" ability...
		})->middleware(['auth:sanctum', 'ability:check-status,place-orders']);

Access all tokens
    foreach ($user->tokens as $token) {
        // ...
    }

protect api routes
    Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
        return $request->user();
    });

Revoking Tokens
    
    $user->tokens()->delete(); // Revoke all tokens...
    $request->user()->currentAccessToken()->delete(); // Revoke the token that was used to authenticate the current request...
    $user->tokens()->where('id', $tokenId)->delete(); // Revoke a specific token...

Token Expiration
    config/sanctum.php
    'expiration' => 525600, //minutes

    schedule sanctum:prune-expired Artisan command

