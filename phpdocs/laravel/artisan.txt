php artisan  
	Create Artisan Command
		php artisan make:command SendEmails

		class SendEmails extends Command
		{
			protected $signature = 'mail:send {user} {--queue}';
			// Argument is Optional :		'mail:send {user?}'
 			// Argument is Optional with default value:		'mail:send {user=foo}'
			// Options With Values:		 {--queue=}
			// Options with default values:		 {--queue=default}
			// Input Arrays:		'mail:send {user*}', 'mail:send {user?*}'
			// Option Arrays:	'mail:send {--id=*}'
			// php artisan mail:send 1
			// php artisan mail:send 1 --queue
			// php artisan mail:send 1 --queue=default
			// php artisan mail:send 1 2
			// php artisan mail:send --id=1 --id=2

			protected $signature = 'mail:send
									{user : The ID of the user}
									{--queue : Whether the job should be queued}';

			protected $description = 'Send msg to a user';	

			public function handle(): void
			{
				//get arguments
				$userId = $this->argument('user');
				$arguments = $this->arguments();

				//get options
				$queueName = $this->option('queue'); 
				$options = $this->options();

				//user prompt
				$name = $this->ask('What is your name?');
				$password = $this->secret('What is the password?');

				//user confirm
				if ($this->confirm('Do you wish to continue?')) { // ... }
				if ($this->confirm('Do you wish to continue?', true)) { // ... }

				//autocomplete
				$name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);

				//multichoice
				$name = $this->choice(
					'What is your name?',
					['Taylor', 'Dayle'],
					$defaultIndex
				);

				$name = $this->choice(
					'What is your name?',
					['Taylor', 'Dayle'],
					$defaultIndex, $maxAttempts = null, $allowMultipleSelections = false
				);

				//output
				$this->info('The command was successful!');
				$this->error('Something went wrong!');
				$this->line('Display this on the screen');
				$this->newLine();
				$this->newLine(3);

				//tables
				$this->table(
					['Name', 'Email'],
					User::all(['name', 'email'])->toArray()
				);

				//progressbars
				$users = $this->withProgressBar(User::all(), function (User $user) {
					$this->performTask($user);
				});

				//calling a command
				$this->call('mail:send', [ 'user' => 1, '--queue' => 'default' ]);
				$this->callSilently('mail:send', [ 'user' => 1, '--queue' => 'default' ]);

				//signal handling
				$this->trap(SIGTERM, fn () => $this->shouldKeepRunning = false); 
					while ($this->shouldKeepRunning) { // ... }

				$this->trap([SIGTERM, SIGQUIT], function (int $signal) {
					$this->shouldKeepRunning = false;				
					dump($signal); // SIGTERM / SIGQUIT
				});
			}
		}


	for isolation
		use Illuminate\Contracts\Console\Isolatable;
		class SendEmails extends Command implements Isolatable
			OR
		php artisan mail:send 1 --isolated


	call a command 
		Artisan::call('migrate:fresh --seed') //returns exitCode
		Artisan::call( 'mail:send', ['user' => $user, '--queue' => 'default'] );
		Artisan::call('mail:send', [ '--id' => [5, 13] ]);
		Artisan::call('migrate:refresh', [ '--force' => true, ]);
		Artisan::queue('mail:send', [ 'user' => $user, '--queue' => 'default' ]);
		Artisan::queue('mail:send', [ 'user' => 1, '--queue' => 'default' ])->onConnection('redis')->onQueue('commands');

	Default commands
		about                  Display basic information about your application
		clear-compiled         Remove the compiled class file
		completion             Dump the shell completion script
		db                     Start a new database CLI session
		docs                   Access the Laravel documentation
		down                   Put the application into maintenance / demo mode
		env                    Display the current framework environment
		help                   Display help for a command
		inspire                Display an inspiring quote
		list                   List commands
		migrate                Run the database migrations
		optimize               Cache the framework bootstrap files
		serve                  Serve the application on the PHP development server
		test                   Run the application tests
		tinker                 Interact with your application
		up                     Bring the application out of maintenance mode
		auth
		auth:clear-resets      Flush expired password reset tokens
		cache
		cache:clear            Flush the application cache
		cache:forget           Remove an item from the cache
		cache:table            Create a migration for the cache database table
		config
		config:cache           Create a cache file for faster configuration loading
		config:clear           Remove the configuration cache file
		db
		db:monitor             Monitor the number of connections on the specified database
		db:seed                Seed the database with records
		db:show                Display information about the given database
		db:table               Display information about the given database table
		db:wipe                Drop all tables, views, and types
		env
		env:decrypt            Decrypt an environment file
		env:encrypt            Encrypt an environment file
		event
		event:cache            Discover and cache the application's events and listeners
		event:clear            Clear all cached events and listeners
		event:generate         Generate the missing events and listeners based on registration
		event:list             List the application's events and listeners
		key
		key:generate           Set the application key
		make
		make:cast              Create a new custom Eloquent cast class
		make:channel           Create a new channel class
		make:command           Create a new Artisan command
		make:component         Create a new view component class
		make:controller        Create a new controller class
		make:event             Create a new event class
		make:exception         Create a new custom exception class
		make:factory           Create a new model factory
		make:job               Create a new job class
		make:listener          Create a new event listener class
		make:mail              Create a new email class
		make:middleware        Create a new middleware class
		make:migration         Create a new migration file
		make:model             Create a new Eloquent model class
		make:notification      Create a new notification class
		make:observer          Create a new observer class
		make:policy            Create a new policy class
		make:provider          Create a new service provider class
		make:request           Create a new form request class
		make:resource          Create a new resource
		make:rule              Create a new validation rule
		make:scope             Create a new scope class
		make:seeder            Create a new seeder class
		make:test              Create a new test class
		migrate
		migrate:fresh          Drop all tables and re-run all migrations
		migrate:install        Create the migration repository
		migrate:refresh        Reset and re-run all migrations
		migrate:reset          Rollback all database migrations
		migrate:rollback       Rollback the last database migration
		migrate:status         Show the status of each migration
		model
		model:prune            Prune models that are no longer needed
		model:show             Show information about an Eloquent model
		notifications
		notifications:table    Create a migration for the notifications table
		optimize
		optimize:clear         Remove the cached bootstrap files
		package
		package:discover       Rebuild the cached package manifest
		queue
		queue:batches-table    Create a migration for the batches database table
		queue:clear            Delete all of the jobs from the specified queue
		queue:failed           List all of the failed queue jobs
		queue:failed-table     Create a migration for the failed queue jobs database table
		queue:flush            Flush all of the failed queue jobs
		queue:forget           Delete a failed queue job
		queue:listen           Listen to a given queue
		queue:monitor          Monitor the size of the specified queues
		queue:prune-batches    Prune stale entries from the batches database
		queue:prune-failed     Prune stale entries from the failed jobs table
		queue:restart          Restart queue worker daemons after their current job
		queue:retry            Retry a failed queue job
		queue:retry-batch      Retry the failed jobs for a batch
		queue:table            Create a migration for the queue jobs database table
		queue:work             Start processing jobs on the queue as a daemon
		route
		route:cache            Create a route cache file for faster route registration
		route:clear            Remove the route cache file
		route:list             List all registered routes
		sail
		sail:install           Install Laravel Sail's default Docker Compose file
		sail:publish           Publish the Laravel Sail Docker files
		sanctum
		sanctum:prune-expired  Prune tokens expired for more than specified number of hours.
		schedule
		schedule:clear-cache   Delete the cached mutex files created by scheduler
		schedule:list          List the scheduled commands
		schedule:run           Run the scheduled commands
		schedule:test          Run a scheduled command
		schedule:work          Start the schedule worker
		schema
		schema:dump            Dump the given database schema
		session
		session:table          Create a migration for the session database table
		storage
		storage:link           Create the symbolic links configured for the application
		stub
		stub:publish           Publish all stubs that are available for customization
		vendor
		vendor:publish         Publish any publishable assets from vendor packages
		view
		view:cache             Compile all of the application's Blade templates
		view:clear             Clear all compiled view files


