Middleware
	php artisan make:middleware nameofmiddleware
	app/HTTP/Middleware/nameofmiddleware.php
	
	//	use \Illuminate\Http\Request  $request
	//    use \Illuminate\Http\Response  $response
	//	use Closure $next;
	
	Response Handling
		public function handle(Request $request,Response $response, Closure $next, $param)
		{
			if (! $request->user()->hasRole($param)) {
				// Redirect...
				//$param is a middleware param
			}

			// perform action before handling request
			return $next($request);
				//OR
				
			// perform action before handling request			
			$response = $next($request);
			// Perform action after handling request
			return $response;
		}
		
		public function terminate(Request $request, Response $response): void
		{
			// ...
		}
		
	Global Middleware
		list the middleware class in the $middleware or $middlewareGroups property of your app/Http/Kernel.php class.
			\App\Http\Middleware\Nameofmiddleware::class
			
	Assigning and Removing Middleware To Routes
		list the middleware class in the $routeMiddleware OR protected $middlewareAliases = [] property of your app/Http/Kernel.php class.
			'nameofmiddleware' => \App\Http\Middleware\Nameofmiddleware::class
		OR protected $middlewareGroups = []	
			
			Then
				Route::get($uri,$callback)->middleware('nameofmiddleware');
				Route::get($uri,$callback)->middleware('nameofmiddleware:param');
				Route::get($uri,$callback)->middleware(['first', 'second']);
				Route::middleware(['first', 'second'])->group(function () {
					Route::get($uri, $callback);
					Route::get($uri, $callback);
						// both uses first & second middleware...
					Route::get($uri, $callback)->withoutMiddleware('first');
						//omits first middleware
				});
				

		use App\Http\Middleware\Nameofmiddleware;
			Route::get($uri,$callback)
			->middleware(Nameofmiddleware::class);
			->middleware([First::class, Second::class]);

		Route::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {
			Route::get($uri,$callback});
		});
		
		
		
		Route::without+|middleware([Nameofmiddleware::class],...)->group(function () {
			Route::get($uri, $callback);
			Route::get($uri, $callback)->withoutMiddleware([Nameofmiddleware::class]);
		});

		Controller Middleware
			class UserController extends Controller
			{
				public function __construct(){
					$this->middleware('auth');
					$this->middleware('log')->only('index');
					$this->middleware('subscribed')->except('store');
					$this->middleware(function ($request, $next) {
						//inline middleware
						return $next($request);
					});
				}
			}